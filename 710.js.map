{"version":3,"file":"710.js","mappings":"4JAaA,SAASA,GAAK,QAAEC,IACd,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAqB,IAAM,OAEnDC,EAAAA,EAAAA,WAAU,KACRC,MAAM,SACHC,KAAMC,GAAQA,EAAIC,QAClBF,KAAK,EAAGL,UAAWA,GACnBK,KAAKJ,IACP,IAEH,MAAMO,GAAeC,EAAAA,EAAAA,aAClBC,IACCA,EAAEC,iBACFZ,EAAQ,CAAEa,KAAOF,EAAEG,OAA6BC,QAAQF,QAE1D,IAGF,OAAa,OAATZ,EACKe,EAAAA,cAACC,EAAAA,EAAO,MAIfD,EAAAA,cAAA,WACEA,EAAAA,cAAA,UACGf,EAAKiB,IAAI,EAAGL,UACXG,EAAAA,cAAA,MAAIG,IAAKN,GACPG,EAAAA,cAAA,KACEI,KAAM,SAASC,mBAAmBR,KAClC,YAAWA,EACXC,OAAO,SACPQ,QAASb,GAERI,MAOf,CAEA,SAASU,GAAK,KAAEC,IACd,MAAMC,GAAWC,EAAAA,EAAAA,QAAO,MAExB,OACEV,EAAAA,cAAA,OACEW,MAAO,CACLC,SAAU,QACVC,OAAQ,EACRC,MAAO,EACPC,OAAQ,oBAGVf,EAAAA,cAAA,SACEgB,IAAKP,EACLQ,IAAK,SAASZ,mBAAmBG,EAAKX,QACtCqB,MAAM,MACNC,OAAO,MACPC,UAAQ,EACRC,UAAQ,IAIhB,CAEe,SAASC,IACtB,MAAOd,EAAMxB,IAAWG,EAAAA,EAAAA,UAA0B,MAElD,OACEa,EAAAA,cAAA,eACEA,EAAAA,cAAA,UAAI,SACJA,EAAAA,cAACjB,EAAI,CAACC,QAASA,IACdwB,GAAQR,EAAAA,cAACO,EAAI,CAACC,KAAMA,IAG3B,C,qRCpFe,SAASe,GAAY,MAClCL,EAAK,OACLC,KACGK,IAMH,OACExB,EAAAA,cAACyB,EAAAA,SAAQ,CAACC,SAAU,MAClB1B,EAAAA,cAAC2B,EAAAA,EAAYC,EAAA,CACXC,UAAQ,GACJL,EAAI,CACRb,MAAO,CAAEmB,QAAS,QAASZ,QAAOC,UAClCY,OAAQ,CAAC,KAIjB,C,0HClBA,MAAMC,E,SAAgBC,GAAOC,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+CzB,SAASjC,IACd,OACED,EAAAA,cAACgC,EAAa,KACZhC,EAAAA,cAAA,OAAKmC,UAAU,UAAUC,QAAQ,aAC/BpC,EAAAA,cAAA,UACEmC,UAAU,OACVE,GAAG,KACHC,GAAG,KACHC,EAAE,KACFC,KAAK,OACLC,YAAY,OAKtB,C","sources":["webpack://@dev/web/../movie/src/containers/index.tsx","webpack://@dev/web/../video/src/components/ReactPlayer/index.tsx","webpack://@dev/web/../video/src/components/Spinner/index.tsx"],"sourcesContent":["// import mqtt from \"mqtt\";\nimport { Spinner } from \"@dev/video/components\";\nimport React, {\n  Dispatch,\n  type MouseEventHandler,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { type ItemType } from \"../schema\";\n\nfunction List({ setItem }: { setItem: Dispatch<SetStateAction<ItemType>> }) {\n  const [list, setList] = useState<ItemType[]>(() => null);\n\n  useEffect(() => {\n    fetch(\"movie\")\n      .then((res) => res.json())\n      .then(({ list }) => list)\n      .then(setList);\n  }, []);\n\n  const handleSelect = useCallback<MouseEventHandler<HTMLAnchorElement>>(\n    (e) => (\n      e.preventDefault(),\n      setItem({ name: (e.target as HTMLAnchorElement).dataset.name })\n    ),\n    [],\n  );\n\n  if (list === null) {\n    return <Spinner />;\n  }\n\n  return (\n    <div>\n      <ul>\n        {list.map(({ name }) => (\n          <li key={name}>\n            <a\n              href={`photo/${encodeURIComponent(name)}`}\n              data-name={name}\n              target=\"_blank\"\n              onClick={handleSelect}\n            >\n              {name}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nfunction Item({ item }: { item: ItemType }) {\n  const videoRef = useRef(null);\n\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        bottom: 0,\n        right: 0,\n        border: \"2px solid black\",\n      }}\n    >\n      <video\n        ref={videoRef}\n        src={`movie/${encodeURIComponent(item.name)}`}\n        width=\"480\"\n        height=\"270\"\n        autoPlay\n        controls\n      ></video>\n    </div>\n  );\n}\n\nexport default function Section() {\n  const [item, setItem] = useState<ItemType | null>(null);\n\n  return (\n    <section>\n      <h2>Movie</h2>\n      <List setItem={setItem} />\n      {item && <Item item={item} />}\n    </section>\n  );\n}\n","import React, { Suspense, type ComponentProps } from \"react\";\nimport YoutubeVideo from \"youtube-video-element/react\";\n\n// https://github.com/muxinc/media-elements/blob/main/examples/nextjs/app/youtube-video/page.tsx\n// https://github.com/muxinc/media-elements/blob/main/examples/nextjs/app/player.client.tsx\nexport default function ReactPlayer({\n  width,\n  height,\n  ...rest\n}: ComponentProps<typeof YoutubeVideo> & {\n  light: boolean;\n  pip: boolean;\n  playing: boolean;\n}) {\n  return (\n    <Suspense fallback={null}>\n      <YoutubeVideo\n        autoplay\n        {...rest}\n        style={{ display: \"block\", width, height }}\n        config={{}}\n      />\n    </Suspense>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\n// https://codepen.io/GeoffreyCrofte/pen/ZQrgZm\n// https://codepen.io/supah/pen/BjYLdW\n// https://codesandbox.io/s/m3v440z36j\nconst StyledSpinner = styled.div`\n  display: inline-block;\n  width: 1em;\n  height: 1em;\n  position: relative;\n\n  .spinner {\n    position: absolute;\n    width: 1.5em;\n    height: 1.5em;\n    margin: 0;\n  }\n\n  svg {\n    animation: rotate 2s linear infinite;\n    margin: -25px 0 0 -25px;\n    width: 50px;\n    height: 50px;\n\n    & .path {\n      stroke: #5652bf;\n      stroke-linecap: round;\n      animation: dash 1.5s ease-in-out infinite;\n    }\n  }\n\n  @keyframes rotate {\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n  @keyframes dash {\n    0% {\n      stroke-dasharray: 1, 150;\n      stroke-dashoffset: 0;\n    }\n    50% {\n      stroke-dasharray: 90, 150;\n      stroke-dashoffset: -35;\n    }\n    100% {\n      stroke-dasharray: 90, 150;\n      stroke-dashoffset: -124;\n    }\n  }\n`;\n\nexport function Spinner() {\n  return (\n    <StyledSpinner>\n      <svg className=\"spinner\" viewBox=\"0 0 50 50\">\n        <circle\n          className=\"path\"\n          cx=\"25\"\n          cy=\"25\"\n          r=\"20\"\n          fill=\"none\"\n          strokeWidth=\"5\"\n        />\n      </svg>\n    </StyledSpinner>\n  );\n}\n"],"names":["List","setItem","list","setList","useState","useEffect","fetch","then","res","json","handleSelect","useCallback","e","preventDefault","name","target","dataset","React","Spinner","map","key","href","encodeURIComponent","onClick","Item","item","videoRef","useRef","style","position","bottom","right","border","ref","src","width","height","autoPlay","controls","Section","ReactPlayer","rest","Suspense","fallback","YoutubeVideo","_extends","autoplay","display","config","StyledSpinner","styled","div","className","viewBox","cx","cy","r","fill","strokeWidth"],"sourceRoot":""}