{"version":3,"file":"529.js","mappings":"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","sources":["webpack://@dev/web/../status/src/utils/index.ts","webpack://@dev/web/../status/src/containers/index.tsx"],"sourcesContent":["export const getTotal = (usage: string[]) =>\n  Number(\n    ((\n      (usage\n        .map((line) => line.split(/\\s+/))\n        .find((cols) => cols[5].match(/hostname/)) || [])[4] || \"\"\n    ).match(/^(\\d+)%/) || [])[1],\n  );\n","import mqtt from \"mqtt\";\nimport React, { useEffect } from \"react\";\nimport prettyMilliseconds from \"pretty-ms\";\nimport prettyBytes from \"pretty-bytes\";\nimport { createAsset } from \"use-asset\";\nimport type { StatusType } from \"../schema\";\nimport { getTotal } from \"../utils\";\n\nexport const API_URL = process.env.API_URL || \"\";\nexport const MQTT_URL = (({ hostname, protocol }) =>\n  `${protocol}//${hostname}:9001`)(\n  new URL(\n    `${process.env.MQTT_URL || window.location.href}`.replace(\n      /^mqtt:\\/\\//,\n      \"ws://\",\n    ),\n  ),\n);\n\n// https://github.com/pmndrs/use-asset\nconst asset = createAsset(() =>\n  fetch(`${API_URL}status`)\n    .then((res) => res.json())\n    .then<StatusType>(({ result }) => result)\n    .catch(\n      (error) => (\n        console.error(error),\n        {\n          databases: [],\n          usage: [],\n          cpus: [],\n          hostname: null,\n          platform: null,\n          type: null,\n          loadavg: null,\n          freemem: 0,\n          totalmem: 0,\n          uptime: 0,\n        }\n      ),\n    ),\n);\n\nexport default function Section() {\n  const result = asset.read();\n\n  console.log({ result });\n  console.log({ total: getTotal(result.usage) });\n\n  useEffect(() => {\n    console.log([\"mqtt.connect\"], MQTT_URL);\n\n    const client = mqtt.connect(MQTT_URL);\n\n    client.on(\"connect\", () => {\n      client.subscribe(\"presence\", (err) => {\n        if (!err) {\n          client.publish(\"presence\", \"Hello mqtt\");\n        }\n      });\n    });\n\n    client.on(\"message\", (_topic, message) => {\n      // message is Buffer\n      console.log(message.toString());\n      client.end();\n    });\n    return () => {};\n  }, []);\n\n  return (\n    <section>\n      <h2>Status</h2>\n      <h3>databases</h3>\n      <table>\n        <tbody>\n          <tr>\n            <th>name</th>\n            <th>size</th>\n          </tr>\n          {result.databases.map(({ name, size }, key) => (\n            <tr key={key}>\n              <td>{name}</td>\n              <td>{size}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <h3>disks</h3>\n      <table>\n        <tbody>\n          <tr>\n            <th>filesystem</th>\n            <th>size</th>\n            <th>used</th>\n            <th>avail</th>\n            <th>capacity</th>\n          </tr>\n          {result.usage.map((line, key) => (\n            <tr key={key}>\n              <td colSpan={5}>{line}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <h3>cpus</h3>\n      <table>\n        <tbody>\n          <tr>\n            <th>model</th>\n            <th>speed</th>\n            <th>times</th>\n          </tr>\n          {result.cpus.map(({ model, speed, times }, key) => (\n            <tr key={key}>\n              <td>{model}</td>\n              <td>{speed}</td>\n              <td>\n                <pre>{JSON.stringify(times, null, 2)}</pre>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <h3>host</h3>\n      <table>\n        <tbody>\n          <tr>\n            <th>hostname</th>\n            <th>platform</th>\n            <th>type</th>\n            <th>loadavg</th>\n          </tr>\n          {[result].map(({ hostname, platform, type, loadavg }, key) => (\n            <tr key={key}>\n              <td>{hostname}</td>\n              <td>{platform}</td>\n              <td>{type}</td>\n              <td>\n                <pre>{JSON.stringify(loadavg, null, 2)}</pre>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <h3>mem</h3>\n      <table>\n        <tbody>\n          <tr>\n            <th>freemem</th>\n            <th>totalmem</th>\n            <th>usage</th>\n          </tr>\n          {[result].map(({ freemem, totalmem }, key) => (\n            <tr key={key}>\n              <td>{prettyBytes(freemem)}</td>\n              <td>{prettyBytes(totalmem)}</td>\n              <td>{prettyBytes(totalmem - freemem)}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <h3>uptime</h3>\n      <table>\n        <tbody>\n          <tr>\n            <th>uptime</th>\n          </tr>\n          {[result].map(({ uptime }, key) => (\n            <tr key={key}>\n              <td>{prettyMilliseconds(uptime * 1000)}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <pre>{JSON.stringify(result, null, 2)}</pre>\n    </section>\n  );\n}\n"],"names":["getTotal","usage","Number","map","line","split","find","cols","match","MQTT_URL","hostname","protocol","URL","window","location","href","replace","asset","createAsset","fetch","then","res","json","result","catch","error","console","databases","cpus","platform","type","loadavg","freemem","totalmem","uptime","Section","read","log","total","useEffect","client","mqtt","connect","on","subscribe","err","publish","_topic","message","toString","end","React","name","size","key","colSpan","model","speed","times","JSON","stringify","prettyBytes","prettyMilliseconds"],"sourceRoot":""}