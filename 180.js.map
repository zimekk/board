{"version":3,"file":"180.js","mappings":"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","sources":["webpack://@dev/web/../stream/src/schema/index.ts","webpack://@dev/web/../stream/src/containers/index.tsx"],"sourcesContent":["import { z } from \"zod\";\n\nexport const StreamsSchema = z.object({\n  live: z\n    .record(\n      z.object({\n        publisher: z.object({\n          app: z.string(),\n          stream: z.string(),\n          clientId: z.string(),\n          connectCreated: z.string(),\n          bytes: z.number(),\n          ip: z.string(),\n          audio: z\n            .object({\n              codec: z.string(),\n              profile: z.string(),\n              samplerate: z.number(),\n              channels: z.number(),\n            })\n            .nullable(),\n          video: z.object({\n            codec: z.string(),\n            width: z.number(),\n            height: z.number(),\n            profile: z.string(),\n            level: z.number(),\n            fps: z.number(),\n          }),\n        }),\n        subscribers: z.array(z.unknown()),\n      }),\n    )\n    .optional(),\n});\n","import flvjs from \"pro-flv.js\";\nimport React, {\n  ChangeEventHandler,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { StreamsSchema } from \"../schema\";\n\nexport const MEDIA_URL =\n  process.env.MEDIA_URL ||\n  (({ protocol, hostname }) => `${protocol}//${hostname}:7000`)(\n    new URL(window.location.href),\n  );\n\n// https://github.com/illuspas/Node-Media-Server\nfunction Stream({ stream: url }: { stream: string }) {\n  const [error, setError] = useState<object>(null);\n  const videoRef = useRef();\n\n  useEffect(() => {\n    // https://github.com/illuspas/pro-fiv.js\n    if (flvjs.isSupported()) {\n      const video = videoRef.current;\n      const flvPlayer = flvjs.createPlayer({\n        type: \"flv\",\n        url,\n      });\n      flvPlayer.attachMediaElement(video);\n      flvPlayer.on(flvjs.Events.ERROR, setError);\n      flvPlayer.load();\n      // flvPlayer.play();\n    }\n  }, [url]);\n\n  return (\n    <div>\n      <video ref={videoRef} width=\"480\" height=\"270\" autoPlay controls></video>\n      {error && (\n        <pre\n          style={{\n            background: \"crimson\",\n            color: \"white\",\n            margin: \".5em\",\n            padding: \"1em\",\n          }}\n        >\n          {JSON.stringify(error)}\n        </pre>\n      )}\n    </div>\n  );\n}\n\nexport default function Section() {\n  const [list, setList] = useState<string[] | null>(null);\n  const [stream, setStream] = useState(null);\n\n  useEffect(() => {\n    (window\n      ? Promise.resolve({\n          live: {\n            NZXT: {},\n          },\n        })\n      : fetch(`${MEDIA_URL}/api/streams`, {\n          headers: {\n            Authorization: `Basic ${btoa([\"admin\", \"admin\"].join(\":\"))}`,\n          },\n        })\n          .then((res) => res.json())\n          .then(StreamsSchema.parseAsync)\n    )\n      .then((data) =>\n        Object.keys(data.live || {}).map(\n          (name) => `${MEDIA_URL}/live/${name}.flv`,\n        ),\n      )\n      .then((list) => list.length > 0 && (setList(list), setStream(list[0])));\n  }, []);\n\n  const handleChangeStream = useCallback<ChangeEventHandler<HTMLSelectElement>>(\n    ({ target }) => setStream(target.value),\n    [],\n  );\n\n  return (\n    <section>\n      <h2>Stream</h2>\n      {stream && list && (\n        <select value={stream} onChange={handleChangeStream}>\n          {list.map((url) => (\n            <option key={url} value={url}>\n              {url}\n            </option>\n          ))}\n        </select>\n      )}\n      {stream && <Stream stream={stream} />}\n      <a href={`${MEDIA_URL}/admin/streams`} target=\"_blank\">\n        streams\n      </a>\n      <pre style={{ background: \"linen\", margin: \".5em\", padding: \"1em\" }}>\n        {`~ $ git clone https://github.com/illuspas/Node-Media-Server\n\n~/Node-Media-Server $ docker build . -t nms\n~/Node-Media-Server $ docker run --name nms -d -p 1935:1935 -p 7000:8000 -p 8443:8443 nms\n`}\n      </pre>\n      {stream && (\n        <pre style={{ background: \"linen\", margin: \".5em\", padding: \"1em\" }}>\n          {`ffmpeg -stream_loop -1 -re -i share/library/BilaShsQphM.mp4 -c copy -f flv ${((url) => `rtmp://${url.hostname}${url.pathname.split(\".\")[0]}`)(new URL(stream))}\n`}\n        </pre>\n      )}\n    </section>\n  );\n}\n"],"names":["StreamsSchema","z","object","live","record","publisher","app","string","stream","clientId","connectCreated","bytes","number","ip","audio","codec","profile","samplerate","channels","nullable","video","width","height","level","fps","subscribers","array","unknown","optional","MEDIA_URL","protocol","hostname","URL","window","location","href","Stream","url","error","setError","useState","videoRef","useRef","useEffect","flvjs","current","flvPlayer","type","attachMediaElement","on","ERROR","load","React","ref","autoPlay","controls","style","background","color","margin","padding","JSON","stringify","Section","list","setList","setStream","Promise","resolve","NZXT","fetch","headers","Authorization","btoa","join","then","res","json","parseAsync","data","Object","keys","map","name","length","handleChangeStream","useCallback","target","value","onChange","key","pathname","split"],"sourceRoot":""}