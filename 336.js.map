{"version":3,"file":"336.js","mappings":"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","sources":["webpack://@dev/web/../share/src/containers/index.tsx"],"sourcesContent":["import mqtt from \"mqtt\";\nimport React, {\n  type ChangeEventHandler,\n  type Dispatch,\n  type SetStateAction,\n  type MouseEventHandler,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\n// import { Spinner } from \"@dev/video/components\";\nimport type { DeviceType, NetworkType } from \"../schema\";\n\nexport const API_URL = process.env.API_URL || \"\";\nexport const MQTT_URL = (({ hostname, protocol }) =>\n  `${protocol}//${hostname}:9001`)(\n  new URL(\n    `${process.env.MQTT_URL || window.location.href}`.replace(\n      /^mqtt:\\/\\//,\n      \"ws://\",\n    ),\n  ),\n);\n\nfunction Devices({ url }: { url: string }) {\n  const [list, setList] = useState<DeviceType[]>([]);\n\n  useEffect(() => {\n    const client = mqtt.connect(MQTT_URL);\n\n    console.log({ MQTT_URL });\n\n    client.on(\"connect\", () => {\n      client.subscribe(\"device\", (err) => {\n        // if (!err) {\n        //   client.publish(\"presence\", \"Hello mqtt\");\n        // }\n      });\n    });\n\n    client.on(\"message\", (_topic, message) => {\n      // message is Buffer\n      const item = JSON.parse(message.toString());\n      setList((list) => list.concat(item));\n    });\n\n    fetch(\"share\")\n      .then((res) => res.json())\n      .then(setList);\n\n    return () => {\n      client.end();\n    };\n  }, []);\n\n  const handleClickPlay = useCallback<MouseEventHandler<HTMLButtonElement>>(\n    ({ target }) =>\n      fetch(\"share/play\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ xml: (target as HTMLButtonElement).value, url }),\n      })\n        .then((res) => res.json())\n        .then(console.info),\n    [url],\n  );\n\n  return (\n    <div>\n      <h3>devices</h3>\n      <table>\n        <tbody>\n          <tr>\n            <th>host</th>\n            <th>name</th>\n            <th>xml</th>\n            <th>type</th>\n            <th></th>\n          </tr>\n          {list.map(({ host, name, xml, type }, key) => (\n            <tr key={key}>\n              <td>{host}</td>\n              <td>{name}</td>\n              <td>\n                <a href={xml} target=\"_blank\">\n                  {xml}\n                </a>\n              </td>\n              <td>{type}</td>\n              <td>\n                <button\n                  disabled={url === \"\"}\n                  value={xml}\n                  onClick={handleClickPlay}\n                >\n                  play\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <pre>{JSON.stringify(list, null, 2)}</pre>\n    </div>\n  );\n}\n\nfunction Network() {\n  const [list, setList] = useState<NetworkType[]>([]);\n\n  useEffect(() => {\n    fetch(\"share/networks\")\n      .then((res) => res.json())\n      .then(setList);\n  }, []);\n\n  return (\n    <div>\n      <h3>networks</h3>\n      <table>\n        <tbody>\n          <tr>\n            <th>address</th>\n            <th>family</th>\n            <th>mac</th>\n          </tr>\n          {list.map(({ address, family, mac }, key) => (\n            <tr key={key}>\n              <td>\n                <a\n                  href={(({ hash, pathname, port, protocol }) =>\n                    `${protocol}//${address}:${port}${pathname}${hash}`)(\n                    new URL(document.location.href),\n                  )}\n                >\n                  {address}\n                </a>\n              </td>\n              <td>{family}</td>\n              <td>{mac}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <pre>{JSON.stringify(list, null, 2)}</pre>\n    </div>\n  );\n}\n\nfunction Media({\n  url,\n  setUrl,\n}: {\n  url: string;\n  setUrl: Dispatch<SetStateAction<string>>;\n}) {\n  const [list, setList] = useState<string[]>([\n    \"http://commondatastorage.googleapis.com/gtv-videos-bucket/big_buck_bunny_1080p.mp4\",\n  ]);\n\n  useEffect(() => {\n    fetch(\"share/list\")\n      .then((res) => res.json())\n      .then((data) =>\n        setList((list) =>\n          list.concat(\n            data.map((name) =>\n              (({ origin }) =>\n                `${origin}/api/audio/${encodeURIComponent(name)}`)(\n                new URL(document.location.href),\n              ),\n            ),\n          ),\n        ),\n      );\n  }, []);\n\n  const handleChange = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    ({ target }) => setUrl(target.value),\n    [],\n  );\n\n  return (\n    <div>\n      <h3>media</h3>\n      <ul>\n        {list.map((name, key) => (\n          <li key={key}>\n            <label>\n              <input\n                type=\"radio\"\n                value={name}\n                onChange={handleChange}\n                checked={name === url}\n              />\n              <span>{name}</span>\n            </label>\n          </li>\n        ))}\n      </ul>\n      <pre>{JSON.stringify(list, null, 2)}</pre>\n    </div>\n  );\n}\n\nexport default function Section() {\n  const [url, setUrl] = useState(\"\");\n\n  const handleClickStart = useCallback<MouseEventHandler<HTMLButtonElement>>(\n    (e) =>\n      fetch(\"share/start\")\n        .then((res) => res.json())\n        .then(console.info),\n    [],\n  );\n\n  const handleClickDestroy = useCallback<MouseEventHandler<HTMLButtonElement>>(\n    (e) =>\n      fetch(\"share/destroy\")\n        .then((res) => res.json())\n        .then(console.info),\n    [],\n  );\n\n  return (\n    <section>\n      <h2>Share</h2>\n      <button onClick={handleClickStart}>start</button>\n      <button onClick={handleClickDestroy}>destroy</button>\n      <Devices url={url} />\n      <Media url={url} setUrl={setUrl} />\n      <Network />\n    </section>\n  );\n}\n"],"names":["MQTT_URL","hostname","protocol","URL","window","location","href","replace","Devices","url","list","setList","useState","useEffect","client","mqtt","connect","console","log","on","subscribe","err","_topic","message","item","JSON","parse","toString","concat","fetch","then","res","json","end","handleClickPlay","useCallback","target","method","headers","body","stringify","xml","value","info","React","map","host","name","type","key","disabled","onClick","Network","address","family","mac","hash","pathname","port","document","Media","setUrl","data","origin","encodeURIComponent","handleChange","onChange","checked","Section","handleClickStart","e","handleClickDestroy"],"sourceRoot":""}