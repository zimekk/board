{"version":3,"file":"336.js","mappings":"yJASO,MACMA,EAAW,GAAIC,WAAUC,cACnC,GAAEA,MAAaD,SADM,CAEtB,IAAIE,IACD,GAA0BC,OAAOC,SAASC,OAAOC,QAChD,aACA,WAKN,SAASC,IACP,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAuB,IA8B/C,OA5BAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAASC,EAAAA,EAAKC,QAAQf,GAsB5B,OApBAgB,QAAQC,IAAI,CAAEjB,aAEda,EAAOK,GAAG,WAAW,KACnBL,EAAOM,UAAU,UAAWC,OAI1B,IAGJP,EAAOK,GAAG,WAAW,CAACG,EAAQC,KAE5B,MAAMC,EAAOC,KAAKC,MAAMH,EAAQI,YAChChB,GAASD,GAASA,EAAKkB,OAAOJ,IAAM,IAGtCK,MAAM,SACHC,MAAMC,GAAQA,EAAIC,SAClBF,KAAKnB,GAED,KACLG,EAAOmB,KAAK,CACb,GACA,IAGDC,EAAAA,cAAA,WACEA,EAAAA,cAAA,UAAI,WACJA,EAAAA,cAAA,aACEA,EAAAA,cAAA,aACEA,EAAAA,cAAA,UACEA,EAAAA,cAAA,UAAI,QACJA,EAAAA,cAAA,UAAI,QACJA,EAAAA,cAAA,UAAI,OACJA,EAAAA,cAAA,UAAI,SAELxB,EAAKyB,KAAI,EAAGC,OAAMC,OAAMC,MAAKC,QAAQC,IACpCN,EAAAA,cAAA,MAAIM,IAAKA,GACPN,EAAAA,cAAA,UAAKE,GACLF,EAAAA,cAAA,UAAKG,GACLH,EAAAA,cAAA,UACEA,EAAAA,cAAA,KAAG3B,KAAM+B,EAAKG,OAAO,UAClBH,IAGLJ,EAAAA,cAAA,UAAKK,QAKbL,EAAAA,cAAA,WAAMT,KAAKiB,UAAUhC,EAAM,KAAM,IAGvC,CAEe,SAASiC,IACtB,MAAMC,GAAmBC,EAAAA,EAAAA,cACtBC,GACCjB,MAAM,eACHC,MAAMC,GAAQA,EAAIC,SAClBF,KAAKb,QAAQ8B,OAClB,IAGIC,GAAqBH,EAAAA,EAAAA,cACxBC,GACCjB,MAAM,iBACHC,MAAMC,GAAQA,EAAIC,SAClBF,KAAKb,QAAQ8B,OAClB,IAGF,OACEb,EAAAA,cAAA,eACEA,EAAAA,cAAA,UAAI,SACJA,EAAAA,cAAA,UAAQe,QAASL,GAAkB,SACnCV,EAAAA,cAAA,UAAQe,QAASD,GAAoB,WACrCd,EAAAA,cAACzB,EAAO,MAGd,C","sources":["webpack://@dev/web/../share/src/containers/index.tsx"],"sourcesContent":["import mqtt from \"mqtt\";\nimport React, {\n  type MouseEventHandler,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport type { DeviceType } from \"../schema\";\n\nexport const API_URL = process.env.API_URL || \"\";\nexport const MQTT_URL = (({ hostname, protocol }) =>\n  `${protocol}//${hostname}:9001`)(\n  new URL(\n    `${process.env.MQTT_URL || window.location.href}`.replace(\n      /^mqtt:\\/\\//,\n      \"ws://\",\n    ),\n  ),\n);\n\nfunction Devices() {\n  const [list, setList] = useState<DeviceType[]>([]);\n\n  useEffect(() => {\n    const client = mqtt.connect(MQTT_URL);\n\n    console.log({ MQTT_URL });\n\n    client.on(\"connect\", () => {\n      client.subscribe(\"device\", (err) => {\n        // if (!err) {\n        //   client.publish(\"presence\", \"Hello mqtt\");\n        // }\n      });\n    });\n\n    client.on(\"message\", (_topic, message) => {\n      // message is Buffer\n      const item = JSON.parse(message.toString());\n      setList((list) => list.concat(item));\n    });\n\n    fetch(\"share\")\n      .then((res) => res.json())\n      .then(setList);\n\n    return () => {\n      client.end();\n    };\n  }, []);\n\n  return (\n    <div>\n      <h3>devices</h3>\n      <table>\n        <tbody>\n          <tr>\n            <th>host</th>\n            <th>name</th>\n            <th>xml</th>\n            <th>type</th>\n          </tr>\n          {list.map(({ host, name, xml, type }, key) => (\n            <tr key={key}>\n              <td>{host}</td>\n              <td>{name}</td>\n              <td>\n                <a href={xml} target=\"_blank\">\n                  {xml}\n                </a>\n              </td>\n              <td>{type}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <pre>{JSON.stringify(list, null, 2)}</pre>\n    </div>\n  );\n}\n\nexport default function Section() {\n  const handleClickStart = useCallback<MouseEventHandler<HTMLButtonElement>>(\n    (e) =>\n      fetch(\"share/start\")\n        .then((res) => res.json())\n        .then(console.info),\n    [],\n  );\n\n  const handleClickDestroy = useCallback<MouseEventHandler<HTMLButtonElement>>(\n    (e) =>\n      fetch(\"share/destroy\")\n        .then((res) => res.json())\n        .then(console.info),\n    [],\n  );\n\n  return (\n    <section>\n      <h2>Share</h2>\n      <button onClick={handleClickStart}>start</button>\n      <button onClick={handleClickDestroy}>destroy</button>\n      <Devices />\n    </section>\n  );\n}\n"],"names":["MQTT_URL","hostname","protocol","URL","window","location","href","replace","Devices","list","setList","useState","useEffect","client","mqtt","connect","console","log","on","subscribe","err","_topic","message","item","JSON","parse","toString","concat","fetch","then","res","json","end","React","map","host","name","xml","type","key","target","stringify","Section","handleClickStart","useCallback","e","info","handleClickDestroy","onClick"],"sourceRoot":""}