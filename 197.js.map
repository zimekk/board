{"version":3,"file":"197.js","mappings":"yJAQO,MAAMA,EAAW,GAAIC,WAAUC,cACnC,GAAEA,MAAaD,SADM,CAEtB,IAAIE,IACD,GAA0BC,OAAOC,SAASC,OAAOC,QAChD,aACA,WAKN,SAASC,IACP,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAoB,IAyB5C,OAvBAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAASC,EAAAA,EAAKC,QAAQf,GAiB5B,OAfAgB,QAAQC,IAAI,CAAEjB,aAEda,EAAOK,GAAG,WAAW,KACnBL,EAAOM,UAAU,WAAYC,OAI3B,IAGJP,EAAOK,GAAG,WAAW,CAACG,EAAQC,KAE5BZ,GAASD,GAASA,EAAKc,OAAOC,KAAKC,MAAMH,EAAQI,cAAa,IAGzD,KACLb,EAAOc,KAAK,CACb,GACA,IAGDC,EAAAA,cAAA,UACGnB,EAAKoB,KAAI,CAACP,EAASQ,IAClBF,EAAAA,cAAA,MAAIG,IAAKD,GACPF,EAAAA,cAAA,WAAMJ,KAAKQ,UAAUV,EAAS,KAAM,OAK9C,CAEe,SAASW,IACtB,MAAMC,GAAcC,EAAAA,EAAAA,cACjBC,GACCC,MAAM,eAAgB,CACpBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMhB,KAAKQ,UAAU,CAAES,KAAM,WAE5BC,MAAMC,GAAQA,EAAIC,SAClBF,KAAK1B,QAAQ6B,OAClB,IAGF,OACEjB,EAAAA,cAAA,eACEA,EAAAA,cAAA,UAAI,WACJA,EAAAA,cAAA,UAAQkB,QAASZ,GAAa,WAC9BN,EAAAA,cAACpB,EAAI,MAGX,C","sources":["webpack://@dev/web/../request/src/containers/index.tsx"],"sourcesContent":["import mqtt from \"mqtt\";\nimport React, {\n  type MouseEventHandler,\n  useCallback,\n  useState,\n  useEffect,\n} from \"react\";\n\nexport const MQTT_URL = (({ hostname, protocol }) =>\n  `${protocol}//${hostname}:9001`)(\n  new URL(\n    `${process.env.MQTT_URL || window.location.href}`.replace(\n      /^mqtt:\\/\\//,\n      \"ws://\",\n    ),\n  ),\n);\n\nfunction List() {\n  const [list, setList] = useState<unknown[]>([]);\n\n  useEffect(() => {\n    const client = mqtt.connect(MQTT_URL);\n\n    console.log({ MQTT_URL });\n\n    client.on(\"connect\", () => {\n      client.subscribe(\"request\", (err) => {\n        // if (!err) {\n        //   client.publish(\"presence\", \"Hello mqtt\");\n        // }\n      });\n    });\n\n    client.on(\"message\", (_topic, message) => {\n      // message is Buffer\n      setList((list) => list.concat(JSON.parse(message.toString())));\n    });\n\n    return () => {\n      client.end();\n    };\n  }, []);\n\n  return (\n    <ul>\n      {list.map((message, index) => (\n        <li key={index}>\n          <pre>{JSON.stringify(message, null, 2)}</pre>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default function Section() {\n  const handleClick = useCallback<MouseEventHandler<HTMLButtonElement>>(\n    (e) =>\n      fetch(\"request/test\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ data: \"text\" }),\n      })\n        .then((res) => res.json())\n        .then(console.info),\n    [],\n  );\n\n  return (\n    <section>\n      <h2>Request</h2>\n      <button onClick={handleClick}>request</button>\n      <List />\n    </section>\n  );\n}\n"],"names":["MQTT_URL","hostname","protocol","URL","window","location","href","replace","List","list","setList","useState","useEffect","client","mqtt","connect","console","log","on","subscribe","err","_topic","message","concat","JSON","parse","toString","end","React","map","index","key","stringify","Section","handleClick","useCallback","e","fetch","method","headers","body","data","then","res","json","info","onClick"],"sourceRoot":""}