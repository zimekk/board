{"version":3,"file":"679.js","mappings":"4KAEO,MAAMA,EAAgBC,EAAAA,EAAEC,OAAO,CACpCC,KAAMF,EAAAA,EACHG,OACCH,EAAAA,EAAEC,OAAO,CACPG,UAAWJ,EAAAA,EAAEC,OAAO,CAClBI,IAAKL,EAAAA,EAAEM,SACPC,OAAQP,EAAAA,EAAEM,SACVE,SAAUR,EAAAA,EAAEM,SACZG,eAAgBT,EAAAA,EAAEM,SAClBI,MAAOV,EAAAA,EAAEW,SACTC,GAAIZ,EAAAA,EAAEM,SACNO,MAAOb,EAAAA,EACJC,OAAO,CACNa,MAAOd,EAAAA,EAAEM,SACTS,QAASf,EAAAA,EAAEM,SACXU,WAAYhB,EAAAA,EAAEW,SACdM,SAAUjB,EAAAA,EAAEW,WAEbO,WACHC,MAAOnB,EAAAA,EAAEC,OAAO,CACda,MAAOd,EAAAA,EAAEM,SACTc,MAAOpB,EAAAA,EAAEW,SACTU,OAAQrB,EAAAA,EAAEW,SACVI,QAASf,EAAAA,EAAEM,SACXgB,MAAOtB,EAAAA,EAAEW,SACTY,IAAKvB,EAAAA,EAAEW,aAGXa,YAAaxB,EAAAA,EAAEyB,MAAMzB,EAAAA,EAAE0B,cAG1BC,aCvBQC,EAEX,GAAIC,WAAUC,cAAgB,GAAED,MAAaC,SAA7C,CACE,IAAIC,IAAIC,OAAOC,SAASC,OAM5B,SAASC,GAAS5B,OAAQ6B,IACxB,MAAMC,GAAWC,EAAAA,EAAAA,UAgBjB,OAdAC,EAAAA,EAAAA,YAAU,KAER,GAAIC,IAAAA,cAAqB,CACvB,MAAMrB,EAAQkB,EAASI,QACjBC,EAAYF,IAAAA,aAAmB,CACnCG,KAAM,MACNP,QAEFM,EAAUE,mBAAmBzB,GAC7BuB,EAAUG,MAEZ,IACC,CAACT,IAGFU,EAAAA,cAAA,WACEA,EAAAA,cAAA,SAAOC,IAAKV,EAAUjB,MAAM,MAAMC,OAAO,MAAM2B,UAAQ,EAACC,UAAQ,IAGtE,CAEe,SAASC,IACtB,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAA0B,OAC3C9C,EAAQ+C,IAAaD,EAAAA,EAAAA,UAAS,OAErCd,EAAAA,EAAAA,YAAU,KACRgB,MAAO,GAAE3B,gBAAyB,CAChC4B,QAAS,CACPC,cAAgB,SAAQC,KAAK,CAAC,QAAS,SAASC,KAAK,WAGtDC,MAAMC,GAAQA,EAAIC,SAClBF,KAAK7D,EAAcgE,YACnBH,MAAMI,GACLC,OAAOC,KAAKF,EAAK9D,MAAQ,CAAC,GAAGiE,KAC1BC,GAAU,GAAExC,UAAkBwC,YAGlCR,MAAMT,GAASA,EAAKkB,OAAS,IAAMjB,EAAQD,GAAOG,EAAUH,EAAK,MAAK,GACxE,IAEH,MAAMmB,GAAqBC,EAAAA,EAAAA,cACzB,EAAGC,YAAalB,EAAUkB,EAAOC,QACjC,IAGF,OACE3B,EAAAA,cAAA,eACEA,EAAAA,cAAA,UAAI,UACHvC,GAAU4C,GACTL,EAAAA,cAAA,UAAQ2B,MAAOlE,EAAQmE,SAAUJ,GAC9BnB,EAAKgB,KAAK/B,GACTU,EAAAA,cAAA,UAAQ6B,IAAKvC,EAAKqC,MAAOrC,GACtBA,MAKR7B,GAAUuC,EAAAA,cAACX,EAAM,CAAC5B,OAAQA,IAC3BuC,EAAAA,cAAA,KAAGZ,KAAO,GAAEN,kBAA2B4C,OAAO,UAAS,WAK7D,CAtEAI,QAAQC,IAAI,CAAEjD,a","sources":["webpack://@dev/web/../stream/src/schema/index.ts","webpack://@dev/web/../stream/src/containers/index.tsx"],"sourcesContent":["import { z } from \"zod\";\n\nexport const StreamsSchema = z.object({\n  live: z\n    .record(\n      z.object({\n        publisher: z.object({\n          app: z.string(),\n          stream: z.string(),\n          clientId: z.string(),\n          connectCreated: z.string(),\n          bytes: z.number(),\n          ip: z.string(),\n          audio: z\n            .object({\n              codec: z.string(),\n              profile: z.string(),\n              samplerate: z.number(),\n              channels: z.number(),\n            })\n            .nullable(),\n          video: z.object({\n            codec: z.string(),\n            width: z.number(),\n            height: z.number(),\n            profile: z.string(),\n            level: z.number(),\n            fps: z.number(),\n          }),\n        }),\n        subscribers: z.array(z.unknown()),\n      }),\n    )\n    .optional(),\n});\n","import React, {\n  ChangeEventHandler,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport flvjs from \"pro-flv.js\";\nimport { StreamsSchema } from \"../schema\";\n\nexport const MEDIA_URL =\n  process.env.MEDIA_URL ||\n  (({ protocol, hostname }) => `${protocol}//${hostname}:7000`)(\n    new URL(window.location.href),\n  );\n\nconsole.log({ MEDIA_URL });\n\n// https://github.com/illuspas/Node-Media-Server\nfunction Stream({ stream: url }: { stream: string }) {\n  const videoRef = useRef();\n\n  useEffect(() => {\n    // https://github.com/illuspas/pro-fiv.js\n    if (flvjs.isSupported()) {\n      const video = videoRef.current;\n      const flvPlayer = flvjs.createPlayer({\n        type: \"flv\",\n        url,\n      });\n      flvPlayer.attachMediaElement(video);\n      flvPlayer.load();\n      // flvPlayer.play();\n    }\n  }, [url]);\n\n  return (\n    <div>\n      <video ref={videoRef} width=\"480\" height=\"270\" autoPlay controls></video>\n    </div>\n  );\n}\n\nexport default function Section() {\n  const [list, setList] = useState<string[] | null>(null);\n  const [stream, setStream] = useState(null);\n\n  useEffect(() => {\n    fetch(`${MEDIA_URL}/api/streams`, {\n      headers: {\n        Authorization: `Basic ${btoa([\"admin\", \"admin\"].join(\":\"))}`,\n      },\n    })\n      .then((res) => res.json())\n      .then(StreamsSchema.parseAsync)\n      .then((data) =>\n        Object.keys(data.live || {}).map(\n          (name) => `${MEDIA_URL}/live/${name}.flv`,\n        ),\n      )\n      .then((list) => list.length > 0 && (setList(list), setStream(list[0])));\n  }, []);\n\n  const handleChangeStream = useCallback<ChangeEventHandler<HTMLSelectElement>>(\n    ({ target }) => setStream(target.value),\n    [],\n  );\n\n  return (\n    <section>\n      <h2>Stream</h2>\n      {stream && list && (\n        <select value={stream} onChange={handleChangeStream}>\n          {list.map((url) => (\n            <option key={url} value={url}>\n              {url}\n            </option>\n          ))}\n        </select>\n      )}\n      {stream && <Stream stream={stream} />}\n      <a href={`${MEDIA_URL}/admin/streams`} target=\"_blank\">\n        streams\n      </a>\n    </section>\n  );\n}\n"],"names":["StreamsSchema","z","object","live","record","publisher","app","string","stream","clientId","connectCreated","bytes","number","ip","audio","codec","profile","samplerate","channels","nullable","video","width","height","level","fps","subscribers","array","unknown","optional","MEDIA_URL","protocol","hostname","URL","window","location","href","Stream","url","videoRef","useRef","useEffect","flvjs","current","flvPlayer","type","attachMediaElement","load","React","ref","autoPlay","controls","Section","list","setList","useState","setStream","fetch","headers","Authorization","btoa","join","then","res","json","parseAsync","data","Object","keys","map","name","length","handleChangeStream","useCallback","target","value","onChange","key","console","log"],"sourceRoot":""}