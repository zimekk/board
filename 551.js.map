{"version":3,"file":"551.js","mappings":"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","sources":["webpack://@dev/web/../transfer/src/containers/store/hooks.ts","webpack://@dev/web/../transfer/src/containers/store/peer/peerTypes.ts","webpack://@dev/web/../transfer/src/containers/helpers/peer.ts","webpack://@dev/web/../transfer/src/containers/store/connection/connectionTypes.ts","webpack://@dev/web/../transfer/src/containers/store/connection/connectionActions.ts","webpack://@dev/web/../transfer/src/containers/store/peer/peerActions.ts","webpack://@dev/web/../transfer/src/containers/helpers/hooks.ts","webpack://@dev/web/../transfer/src/containers/App.tsx","webpack://@dev/web/../transfer/src/containers/store/peer/peerReducer.ts","webpack://@dev/web/../transfer/src/containers/store/connection/connectionReducer.ts","webpack://@dev/web/../transfer/src/containers/store/index.ts","webpack://@dev/web/../transfer/src/containers/index.tsx"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch, RootState } from \"./index\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export enum PeerActionType {\n  PEER_SESSION_START = \"PEER_SESSION_START\",\n  PEER_SESSION_STOP = \"PEER_SESSION_STOP\",\n  PEER_LOADING = \"PEER_LOADING\",\n}\n\nexport interface PeerState {\n  readonly id?: string;\n  readonly loading: boolean;\n  readonly started: boolean;\n}\n","import Peer, { DataConnection } from \"peerjs\";\nimport { message } from \"antd\";\n\nexport enum DataType {\n  FILE = \"FILE\",\n  OTHER = \"OTHER\",\n}\nexport interface Data {\n  dataType: DataType;\n  file?: Blob;\n  fileName?: string;\n  fileType?: string;\n  message?: string;\n}\n\nlet peer: Peer | undefined;\nlet connectionMap: Map<string, DataConnection> = new Map<\n  string,\n  DataConnection\n>();\n\nexport const PeerConnection = {\n  getPeer: () => peer,\n  startPeerSession: () =>\n    new Promise<string>((resolve, reject) => {\n      try {\n        peer = new Peer();\n        peer\n          .on(\"open\", (id) => {\n            console.log(\"My ID: \" + id);\n            resolve(id);\n          })\n          .on(\"error\", (err) => {\n            console.log(err);\n            message.error(err.message);\n          });\n      } catch (err) {\n        console.log(err);\n        reject(err);\n      }\n    }),\n  closePeerSession: () =>\n    new Promise<void>((resolve, reject) => {\n      try {\n        if (peer) {\n          peer.destroy();\n          peer = undefined;\n        }\n        resolve();\n      } catch (err) {\n        console.log(err);\n        reject(err);\n      }\n    }),\n  connectPeer: (id: string) =>\n    new Promise<void>((resolve, reject) => {\n      if (!peer) {\n        reject(new Error(\"Peer doesn't start yet\"));\n        return;\n      }\n      if (connectionMap.has(id)) {\n        reject(new Error(\"Connection existed\"));\n        return;\n      }\n      try {\n        let conn = peer.connect(id, { reliable: true });\n        if (!conn) {\n          reject(new Error(\"Connection can't be established\"));\n        } else {\n          conn\n            .on(\"open\", function () {\n              console.log(\"Connect to: \" + id);\n              connectionMap.set(id, conn);\n              resolve();\n            })\n            .on(\"error\", function (err) {\n              console.log(err);\n              reject(err);\n            });\n        }\n      } catch (err) {\n        reject(err);\n      }\n    }),\n  onIncomingConnection: (callback: (conn: DataConnection) => void) => {\n    peer?.on(\"connection\", function (conn) {\n      console.log(\"Incoming connection: \" + conn.peer);\n      connectionMap.set(conn.peer, conn);\n      callback(conn);\n    });\n  },\n  onConnectionDisconnected: (id: string, callback: () => void) => {\n    if (!peer) {\n      throw new Error(\"Peer doesn't start yet\");\n    }\n    if (!connectionMap.has(id)) {\n      throw new Error(\"Connection didn't exist\");\n    }\n    let conn = connectionMap.get(id);\n    if (conn) {\n      conn.on(\"close\", function () {\n        console.log(\"Connection closed: \" + id);\n        connectionMap.delete(id);\n        callback();\n      });\n    }\n  },\n  sendConnection: (id: string, data: Data): Promise<void> =>\n    new Promise((resolve, reject) => {\n      if (!connectionMap.has(id)) {\n        reject(new Error(\"Connection didn't exist\"));\n      }\n      try {\n        let conn = connectionMap.get(id);\n        if (conn) {\n          conn.send(data);\n        }\n      } catch (err) {\n        reject(err);\n      }\n      resolve();\n    }),\n  onConnectionReceiveData: (id: string, callback: (f: Data) => void) => {\n    if (!peer) {\n      throw new Error(\"Peer doesn't start yet\");\n    }\n    if (!connectionMap.has(id)) {\n      throw new Error(\"Connection didn't exist\");\n    }\n    let conn = connectionMap.get(id);\n    if (conn) {\n      conn.on(\"data\", function (receivedData) {\n        console.log(\"Receiving data from \" + id);\n        let data = receivedData as Data;\n        callback(data);\n      });\n    }\n  },\n};\n","export enum ConnectionActionType {\n  CONNECTION_INPUT_CHANGE = \"CONNECTION_INPUT_CHANGE\",\n  CONNECTION_CONNECT_LOADING = \"CONNECTION_CONNECT_LOADING\",\n  CONNECTION_LIST_ADD = \"CONNECTION_LIST_ADD\",\n  CONNECTION_LIST_REMOVE = \"CONNECTION_LIST_REMOVE\",\n  CONNECTION_ITEM_SELECT = \"CONNECTION_ITEM_SELECT\",\n}\n\nexport interface ConnectionState {\n  readonly id?: string;\n  readonly loading: boolean;\n  readonly list: string[];\n  readonly selectedId?: string;\n}\n","import { ConnectionActionType } from \"./connectionTypes\";\nimport { Dispatch } from \"redux\";\nimport { DataType, PeerConnection } from \"../../helpers/peer\";\nimport { message } from \"antd\";\nimport download from \"js-file-download\";\n\nexport const changeConnectionInput = (id: string) => ({\n  type: ConnectionActionType.CONNECTION_INPUT_CHANGE,\n  id,\n});\n\nexport const setLoading = (loading: boolean) => ({\n  type: ConnectionActionType.CONNECTION_CONNECT_LOADING,\n  loading,\n});\nexport const addConnectionList = (id: string) => ({\n  type: ConnectionActionType.CONNECTION_LIST_ADD,\n  id,\n});\n\nexport const removeConnectionList = (id: string) => ({\n  type: ConnectionActionType.CONNECTION_LIST_REMOVE,\n  id,\n});\n\nexport const selectItem = (id: string) => ({\n  type: ConnectionActionType.CONNECTION_ITEM_SELECT,\n  id,\n});\n\nexport const connectPeer: (\n  id: string,\n) => (dispatch: Dispatch) => Promise<void> =\n  (id: string) => async (dispatch) => {\n    dispatch(setLoading(true));\n    try {\n      await PeerConnection.connectPeer(id);\n      PeerConnection.onConnectionDisconnected(id, () => {\n        message.info(\"Connection closed: \" + id);\n        dispatch(removeConnectionList(id));\n      });\n      PeerConnection.onConnectionReceiveData(id, (file) => {\n        message.info(\"Receiving file \" + file.fileName + \" from \" + id);\n        if (file.dataType === DataType.FILE) {\n          download(file.file || \"\", file.fileName || \"fileName\", file.fileType);\n        }\n      });\n      dispatch(addConnectionList(id));\n      dispatch(setLoading(false));\n    } catch (err) {\n      dispatch(setLoading(false));\n      console.log(err);\n    }\n  };\n","import { PeerActionType } from \"./peerTypes\";\nimport { Dispatch } from \"redux\";\nimport { DataType, PeerConnection } from \"../../helpers/peer\";\nimport { message } from \"antd\";\nimport {\n  addConnectionList,\n  removeConnectionList,\n} from \"../connection/connectionActions\";\nimport download from \"js-file-download\";\n\nexport const startPeerSession = (id: string) => ({\n  type: PeerActionType.PEER_SESSION_START,\n  id,\n});\n\nexport const stopPeerSession = () => ({\n  type: PeerActionType.PEER_SESSION_STOP,\n});\nexport const setLoading = (loading: boolean) => ({\n  type: PeerActionType.PEER_LOADING,\n  loading,\n});\n\nexport const startPeer: () => (dispatch: Dispatch) => Promise<void> =\n  () => async (dispatch) => {\n    dispatch(setLoading(true));\n    try {\n      const id = await PeerConnection.startPeerSession();\n      PeerConnection.onIncomingConnection((conn) => {\n        const peerId = conn.peer;\n        message.info(\"Incoming connection: \" + peerId);\n        dispatch(addConnectionList(peerId));\n        PeerConnection.onConnectionDisconnected(peerId, () => {\n          message.info(\"Connection closed: \" + peerId);\n          dispatch(removeConnectionList(peerId));\n        });\n        PeerConnection.onConnectionReceiveData(peerId, (file) => {\n          message.info(\"Receiving file \" + file.fileName + \" from \" + peerId);\n          if (file.dataType === DataType.FILE) {\n            download(\n              file.file || \"\",\n              file.fileName || \"fileName\",\n              file.fileType,\n            );\n          }\n        });\n      });\n      dispatch(startPeerSession(id));\n      dispatch(setLoading(false));\n    } catch (err) {\n      console.log(err);\n      dispatch(setLoading(false));\n    }\n  };\n","import { useState } from \"react\";\n\nexport const useAsyncState = (initialValue: any) => {\n  const [value, setValue] = useState(initialValue);\n  const setter = (x: any) =>\n    new Promise<void>((resolve) => {\n      setValue(x);\n      resolve();\n    });\n  return [value, setter];\n};\n","import React from \"react\";\nimport {\n  Button,\n  Card,\n  Col,\n  Input,\n  Menu,\n  MenuProps,\n  message,\n  Row,\n  Space,\n  Typography,\n  Upload,\n  UploadFile,\n} from \"antd\";\nimport { CopyOutlined, UploadOutlined } from \"@ant-design/icons\";\nimport { useAppDispatch, useAppSelector } from \"./store/hooks\";\nimport { startPeer, stopPeerSession } from \"./store/peer/peerActions\";\nimport * as connectionAction from \"./store/connection/connectionActions\";\nimport { DataType, PeerConnection } from \"./helpers/peer\";\nimport { useAsyncState } from \"./helpers/hooks\";\n\nconst { Title } = Typography;\ntype MenuItem = Required<MenuProps>[\"items\"][number];\n\nfunction getItem(\n  label: React.ReactNode,\n  key: React.Key,\n  icon?: React.ReactNode,\n  children?: MenuItem[],\n  type?: \"group\",\n): MenuItem {\n  return {\n    key,\n    icon,\n    children,\n    label,\n    type,\n  } as MenuItem;\n}\n\nexport const App: React.FC = () => {\n  const peer = useAppSelector((state) => state.peer);\n  const connection = useAppSelector((state) => state.connection);\n  const dispatch = useAppDispatch();\n\n  const handleStartSession = () => {\n    dispatch(startPeer());\n  };\n\n  const handleStopSession = async () => {\n    await PeerConnection.closePeerSession();\n    dispatch(stopPeerSession());\n  };\n\n  const handleConnectOtherPeer = () => {\n    connection.id != null\n      ? dispatch(connectionAction.connectPeer(connection.id || \"\"))\n      : message.warning(\"Please enter ID\");\n  };\n\n  const [fileList, setFileList] = useAsyncState([] as UploadFile[]);\n  const [sendLoading, setSendLoading] = useAsyncState(false);\n\n  const handleUpload = async () => {\n    if (fileList.length === 0) {\n      message.warning(\"Please select file\");\n      return;\n    }\n    if (!connection.selectedId) {\n      message.warning(\"Please select a connection\");\n      return;\n    }\n    try {\n      await setSendLoading(true);\n      let file = fileList[0] as unknown as File;\n      let blob = new Blob([file], { type: file.type });\n\n      await PeerConnection.sendConnection(connection.selectedId, {\n        dataType: DataType.FILE,\n        file: blob,\n        fileName: file.name,\n        fileType: file.type,\n      });\n      await setSendLoading(false);\n      message.info(\"Send file successfully\");\n    } catch (err) {\n      await setSendLoading(false);\n      console.log(err);\n      message.error(\"Error when sending file\");\n    }\n  };\n\n  return (\n    <Row justify={\"center\"} align={\"top\"}>\n      <Col xs={24} sm={24} md={20} lg={16} xl={12}>\n        <Card>\n          <Title level={2} style={{ textAlign: \"center\" }}>\n            P2P File Transfer\n          </Title>\n          <Card hidden={peer.started}>\n            <Button onClick={handleStartSession} loading={peer.loading}>\n              Start\n            </Button>\n          </Card>\n          <Card hidden={!peer.started}>\n            <Space direction=\"horizontal\">\n              <div>ID: {peer.id}</div>\n              <Button\n                icon={<CopyOutlined />}\n                onClick={async () => {\n                  await navigator.clipboard.writeText(peer.id || \"\");\n                  message.info(\"Copied: \" + peer.id);\n                }}\n              />\n              <Button danger onClick={handleStopSession}>\n                Stop\n              </Button>\n            </Space>\n          </Card>\n          <div hidden={!peer.started}>\n            <Card>\n              <Space direction=\"horizontal\">\n                <Input\n                  placeholder={\"ID\"}\n                  onChange={(e) =>\n                    dispatch(\n                      connectionAction.changeConnectionInput(e.target.value),\n                    )\n                  }\n                  required={true}\n                />\n                <Button\n                  onClick={handleConnectOtherPeer}\n                  loading={connection.loading}\n                >\n                  Connect\n                </Button>\n              </Space>\n            </Card>\n\n            <Card title=\"Connection\">\n              {connection.list.length === 0 ? (\n                <div>Waiting for connection ...</div>\n              ) : (\n                <div>\n                  Select a connection\n                  <Menu\n                    selectedKeys={\n                      connection.selectedId ? [connection.selectedId] : []\n                    }\n                    onSelect={(item) =>\n                      dispatch(connectionAction.selectItem(item.key))\n                    }\n                    items={connection.list.map((e) => getItem(e, e, null))}\n                  />\n                </div>\n              )}\n            </Card>\n            <Card title=\"Send File\">\n              <Upload\n                fileList={fileList}\n                maxCount={1}\n                onRemove={() => setFileList([])}\n                beforeUpload={(file) => {\n                  setFileList([file]);\n                  return false;\n                }}\n              >\n                <Button icon={<UploadOutlined />}>Select File</Button>\n              </Upload>\n              <Button\n                type=\"primary\"\n                onClick={handleUpload}\n                disabled={fileList.length === 0}\n                loading={sendLoading}\n                style={{ marginTop: 16 }}\n              >\n                {sendLoading ? \"Sending\" : \"Send\"}\n              </Button>\n            </Card>\n          </div>\n        </Card>\n      </Col>\n    </Row>\n  );\n};\n\nexport default App;\n","import { PeerActionType, PeerState } from \"./peerTypes\";\n\nexport const initialState: PeerState = {\n  id: undefined,\n  loading: false,\n  started: false,\n};\n\nexport const PeerReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case PeerActionType.PEER_SESSION_START:\n      const { id } = action;\n      return { ...state, id, started: true };\n    case PeerActionType.PEER_SESSION_STOP:\n      return { ...initialState };\n    case PeerActionType.PEER_LOADING:\n      const { loading } = action;\n      return { ...state, loading };\n    default:\n      return state;\n  }\n};\n","import { ConnectionActionType, ConnectionState } from \"./connectionTypes\";\n\nexport const initialState: ConnectionState = {\n  id: undefined,\n  loading: false,\n  list: [],\n  selectedId: undefined,\n};\n\nexport const ConnectionReducer = (state = initialState, action) => {\n  if (action.type === ConnectionActionType.CONNECTION_INPUT_CHANGE) {\n    const { id } = action;\n    return { ...state, id };\n  } else if (action.type === ConnectionActionType.CONNECTION_CONNECT_LOADING) {\n    const { loading } = action;\n    return { ...state, loading };\n  } else if (action.type === ConnectionActionType.CONNECTION_LIST_ADD) {\n    let newList = [...state.list, action.id];\n    if (newList.length === 1) {\n      return { ...state, list: newList, selectedId: action.id };\n    }\n    return { ...state, list: [...state.list, action.id] };\n  } else if (action.type === ConnectionActionType.CONNECTION_LIST_REMOVE) {\n    let newList = [...state.list].filter((e) => e !== action.id);\n    if (state.selectedId && !newList.includes(state.selectedId)) {\n      if (newList.length === 0) {\n        return { ...state, list: newList, selectedId: undefined };\n      } else {\n        return { ...state, list: newList, selectedId: newList[0] };\n      }\n    }\n    return { ...state, list: newList };\n  } else if (action.type === ConnectionActionType.CONNECTION_ITEM_SELECT) {\n    return { ...state, selectedId: action.id };\n  } else {\n    return state;\n  }\n};\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { PeerReducer } from \"./peer/peerReducer\";\nimport { ConnectionReducer } from \"./connection/connectionReducer\";\n\nexport const store = configureStore({\n  reducer: {\n    peer: PeerReducer,\n    connection: ConnectionReducer,\n  },\n});\n\n// window.store = store\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport { store } from \"./store\";\n\n// https://github.com/chidokun/p2p-file-transfer\nexport default function Section() {\n  return (\n    <section>\n      <h2>Transfer</h2>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </section>\n  );\n}\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","PeerActionType","peer","DataType","connectionMap","Map","PeerConnection","closePeerSession","Promise","resolve","reject","destroy","undefined","err","console","log","id","has","Error","conn","connect","reliable","on","set","onConnectionDisconnected","callback","get","delete","onConnectionReceiveData","receivedData","ConnectionActionType","setLoading","loading","type","CONNECTION_CONNECT_LOADING","addConnectionList","CONNECTION_LIST_ADD","removeConnectionList","CONNECTION_LIST_REMOVE","PEER_LOADING","startPeer","async","dispatch","Peer","message","error","peerId","info","file","fileName","dataType","FILE","download","fileType","PEER_SESSION_START","startPeerSession","useAsyncState","initialValue","value","setValue","useState","x","Title","Typography","App","state","connection","fileList","setFileList","sendLoading","setSendLoading","React","Row","justify","align","Col","xs","sm","md","lg","xl","Card","level","style","textAlign","hidden","started","Button","onClick","handleStartSession","Space","direction","icon","CopyOutlined","navigator","clipboard","writeText","danger","PEER_SESSION_STOP","Input","placeholder","onChange","e","target","CONNECTION_INPUT_CHANGE","required","handleConnectOtherPeer","warning","title","list","length","Menu","selectedKeys","selectedId","onSelect","item","key","CONNECTION_ITEM_SELECT","items","map","children","label","Upload","maxCount","onRemove","beforeUpload","UploadOutlined","blob","Blob","data","name","send","sendConnection","disabled","marginTop","initialState","store","configureStore","reducer","PeerReducer","action","ConnectionReducer","newList","filter","includes","Section","Provider"],"sourceRoot":""}