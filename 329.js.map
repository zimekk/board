{"version":3,"file":"329.js","mappings":"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","sources":["webpack://@dev/web/../transfer/src/components/QrCode.tsx","webpack://@dev/web/../transfer/src/containers/helpers/hooks.ts","webpack://@dev/web/../transfer/src/containers/helpers/peer.ts","webpack://@dev/web/../transfer/src/containers/store/connection/connectionTypes.ts","webpack://@dev/web/../transfer/src/containers/store/connection/connectionActions.ts","webpack://@dev/web/../transfer/src/containers/store/hooks.ts","webpack://@dev/web/../transfer/src/containers/store/peer/peerTypes.ts","webpack://@dev/web/../transfer/src/containers/store/peer/peerActions.ts","webpack://@dev/web/../transfer/src/containers/App.tsx","webpack://@dev/web/../transfer/src/containers/store/peer/peerReducer.ts","webpack://@dev/web/../transfer/src/containers/store/connection/connectionReducer.ts","webpack://@dev/web/../transfer/src/containers/store/index.ts","webpack://@dev/web/../transfer/src/containers/index.tsx"],"sourcesContent":["import qrcode from \"qrcode\";\nimport React, { useEffect, useRef } from \"react\";\n\nexport default function QrCode({ children }: { children: string }) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    qrcode.toCanvas(\n      canvasRef.current,\n      children,\n      { margin: 0, scale: 5 },\n      function (error: Error) {\n        if (error) {\n          console.error(error);\n        }\n      },\n    );\n  }, [children]);\n\n  return (\n    <div\n      style={{\n        margin: \"1em\",\n      }}\n    >\n      <a href={children} target=\"_blank\">\n        <canvas ref={canvasRef} width=\"125\" height=\"125\"></canvas>\n      </a>\n    </div>\n  );\n}\n","import { useState } from \"react\";\n\nexport const useAsyncState = (initialValue: any) => {\n  const [value, setValue] = useState(initialValue);\n  const setter = (x: any) =>\n    new Promise<void>((resolve) => {\n      setValue(x);\n      resolve();\n    });\n  return [value, setter];\n};\n","import Peer, { DataConnection } from \"peerjs\";\nimport { message } from \"antd\";\n\nexport enum DataType {\n  FILE = \"FILE\",\n  OTHER = \"OTHER\",\n}\nexport interface Data {\n  dataType: DataType;\n  file?: Blob;\n  fileName?: string;\n  fileType?: string;\n  message?: string;\n}\n\nlet peer: Peer | undefined;\nlet connectionMap: Map<string, DataConnection> = new Map<\n  string,\n  DataConnection\n>();\n\nexport const PeerConnection = {\n  getPeer: () => peer,\n  startPeerSession: () =>\n    new Promise<string>((resolve, reject) => {\n      try {\n        peer = new Peer();\n        peer\n          .on(\"open\", (id) => {\n            console.log(\"My ID: \" + id);\n            resolve(id);\n          })\n          .on(\"error\", (err) => {\n            console.log(err);\n            message.error(err.message);\n          });\n      } catch (err) {\n        console.log(err);\n        reject(err);\n      }\n    }),\n  closePeerSession: () =>\n    new Promise<void>((resolve, reject) => {\n      try {\n        if (peer) {\n          peer.destroy();\n          peer = undefined;\n        }\n        resolve();\n      } catch (err) {\n        console.log(err);\n        reject(err);\n      }\n    }),\n  connectPeer: (id: string) =>\n    new Promise<void>((resolve, reject) => {\n      if (!peer) {\n        reject(new Error(\"Peer doesn't start yet\"));\n        return;\n      }\n      if (connectionMap.has(id)) {\n        reject(new Error(\"Connection existed\"));\n        return;\n      }\n      try {\n        let conn = peer.connect(id, { reliable: true });\n        if (!conn) {\n          reject(new Error(\"Connection can't be established\"));\n        } else {\n          conn\n            .on(\"open\", function () {\n              console.log(\"Connect to: \" + id);\n              connectionMap.set(id, conn);\n              resolve();\n            })\n            .on(\"error\", function (err) {\n              console.log(err);\n              reject(err);\n            });\n        }\n      } catch (err) {\n        reject(err);\n      }\n    }),\n  onIncomingConnection: (callback: (conn: DataConnection) => void) => {\n    peer?.on(\"connection\", function (conn) {\n      console.log(\"Incoming connection: \" + conn.peer);\n      connectionMap.set(conn.peer, conn);\n      callback(conn);\n    });\n  },\n  onConnectionDisconnected: (id: string, callback: () => void) => {\n    if (!peer) {\n      throw new Error(\"Peer doesn't start yet\");\n    }\n    if (!connectionMap.has(id)) {\n      throw new Error(\"Connection didn't exist\");\n    }\n    let conn = connectionMap.get(id);\n    if (conn) {\n      conn.on(\"close\", function () {\n        console.log(\"Connection closed: \" + id);\n        connectionMap.delete(id);\n        callback();\n      });\n    }\n  },\n  sendConnection: (id: string, data: Data): Promise<void> =>\n    new Promise((resolve, reject) => {\n      if (!connectionMap.has(id)) {\n        reject(new Error(\"Connection didn't exist\"));\n      }\n      try {\n        let conn = connectionMap.get(id);\n        if (conn) {\n          conn.send(data);\n        }\n      } catch (err) {\n        reject(err);\n      }\n      resolve();\n    }),\n  onConnectionReceiveData: (id: string, callback: (f: Data) => void) => {\n    if (!peer) {\n      throw new Error(\"Peer doesn't start yet\");\n    }\n    if (!connectionMap.has(id)) {\n      throw new Error(\"Connection didn't exist\");\n    }\n    let conn = connectionMap.get(id);\n    if (conn) {\n      conn.on(\"data\", function (receivedData) {\n        console.log(\"Receiving data from \" + id);\n        let data = receivedData as Data;\n        callback(data);\n      });\n    }\n  },\n};\n","export enum ConnectionActionType {\n  CONNECTION_INPUT_CHANGE = \"CONNECTION_INPUT_CHANGE\",\n  CONNECTION_CONNECT_LOADING = \"CONNECTION_CONNECT_LOADING\",\n  CONNECTION_LIST_ADD = \"CONNECTION_LIST_ADD\",\n  CONNECTION_LIST_REMOVE = \"CONNECTION_LIST_REMOVE\",\n  CONNECTION_ITEM_SELECT = \"CONNECTION_ITEM_SELECT\",\n}\n\nexport interface ConnectionState {\n  readonly id?: string;\n  readonly loading: boolean;\n  readonly list: string[];\n  readonly selectedId?: string;\n}\n","import { ConnectionActionType } from \"./connectionTypes\";\nimport { Dispatch } from \"redux\";\nimport { DataType, PeerConnection } from \"../../helpers/peer\";\nimport { message } from \"antd\";\nimport download from \"js-file-download\";\n\nexport const changeConnectionInput = (id: string) => ({\n  type: ConnectionActionType.CONNECTION_INPUT_CHANGE,\n  id,\n});\n\nexport const setLoading = (loading: boolean) => ({\n  type: ConnectionActionType.CONNECTION_CONNECT_LOADING,\n  loading,\n});\nexport const addConnectionList = (id: string) => ({\n  type: ConnectionActionType.CONNECTION_LIST_ADD,\n  id,\n});\n\nexport const removeConnectionList = (id: string) => ({\n  type: ConnectionActionType.CONNECTION_LIST_REMOVE,\n  id,\n});\n\nexport const selectItem = (id: string) => ({\n  type: ConnectionActionType.CONNECTION_ITEM_SELECT,\n  id,\n});\n\nexport const connectPeer: (\n  id: string,\n) => (dispatch: Dispatch) => Promise<void> =\n  (id: string) => async (dispatch) => {\n    dispatch(setLoading(true));\n    try {\n      await PeerConnection.connectPeer(id);\n      PeerConnection.onConnectionDisconnected(id, () => {\n        message.info(\"Connection closed: \" + id);\n        dispatch(removeConnectionList(id));\n      });\n      PeerConnection.onConnectionReceiveData(id, (file) => {\n        message.info(\"Receiving file \" + file.fileName + \" from \" + id);\n        if (file.dataType === DataType.FILE) {\n          download(file.file || \"\", file.fileName || \"fileName\", file.fileType);\n        }\n      });\n      dispatch(addConnectionList(id));\n      dispatch(setLoading(false));\n    } catch (err) {\n      dispatch(setLoading(false));\n      console.log(err);\n    }\n  };\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch, RootState } from \"./index\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export enum PeerActionType {\n  PEER_SESSION_START = \"PEER_SESSION_START\",\n  PEER_SESSION_STOP = \"PEER_SESSION_STOP\",\n  PEER_LOADING = \"PEER_LOADING\",\n}\n\nexport interface PeerState {\n  readonly id?: string;\n  readonly loading: boolean;\n  readonly started: boolean;\n}\n","import { PeerActionType } from \"./peerTypes\";\nimport { Dispatch } from \"redux\";\nimport { DataType, PeerConnection } from \"../../helpers/peer\";\nimport { message } from \"antd\";\nimport {\n  addConnectionList,\n  removeConnectionList,\n} from \"../connection/connectionActions\";\nimport download from \"js-file-download\";\n\nexport const startPeerSession = (id: string) => ({\n  type: PeerActionType.PEER_SESSION_START,\n  id,\n});\n\nexport const stopPeerSession = () => ({\n  type: PeerActionType.PEER_SESSION_STOP,\n});\nexport const setLoading = (loading: boolean) => ({\n  type: PeerActionType.PEER_LOADING,\n  loading,\n});\n\nexport const startPeer: () => (dispatch: Dispatch) => Promise<void> =\n  () => async (dispatch) => {\n    dispatch(setLoading(true));\n    try {\n      const id = await PeerConnection.startPeerSession();\n      PeerConnection.onIncomingConnection((conn) => {\n        const peerId = conn.peer;\n        message.info(\"Incoming connection: \" + peerId);\n        dispatch(addConnectionList(peerId));\n        PeerConnection.onConnectionDisconnected(peerId, () => {\n          message.info(\"Connection closed: \" + peerId);\n          dispatch(removeConnectionList(peerId));\n        });\n        PeerConnection.onConnectionReceiveData(peerId, (file) => {\n          message.info(\"Receiving file \" + file.fileName + \" from \" + peerId);\n          if (file.dataType === DataType.FILE) {\n            download(\n              file.file || \"\",\n              file.fileName || \"fileName\",\n              file.fileType,\n            );\n          }\n        });\n      });\n      dispatch(startPeerSession(id));\n      dispatch(setLoading(false));\n    } catch (err) {\n      console.log(err);\n      dispatch(setLoading(false));\n    }\n  };\n","import { CopyOutlined, UploadOutlined } from \"@ant-design/icons\";\nimport {\n  Button,\n  Card,\n  Col,\n  Input,\n  Menu,\n  MenuProps,\n  message,\n  Row,\n  Space,\n  Typography,\n  Upload,\n  UploadFile,\n} from \"antd\";\nimport React from \"react\";\nimport QrCode from \"../components/QrCode\";\nimport { useAsyncState } from \"./helpers/hooks\";\nimport { DataType, PeerConnection } from \"./helpers/peer\";\nimport * as connectionAction from \"./store/connection/connectionActions\";\nimport { useAppDispatch, useAppSelector } from \"./store/hooks\";\nimport { startPeer, stopPeerSession } from \"./store/peer/peerActions\";\n\nconst { Title } = Typography;\ntype MenuItem = Required<MenuProps>[\"items\"][number];\n\nfunction getItem(\n  label: React.ReactNode,\n  key: React.Key,\n  icon?: React.ReactNode,\n  children?: MenuItem[],\n  type?: \"group\",\n): MenuItem {\n  return {\n    key,\n    icon,\n    children,\n    label,\n    type,\n  } as MenuItem;\n}\n\nexport const App: React.FC = () => {\n  const peer = useAppSelector((state) => state.peer);\n  const connection = useAppSelector((state) => state.connection);\n  const dispatch = useAppDispatch();\n\n  const handleStartSession = () => {\n    dispatch(startPeer());\n  };\n\n  const handleStopSession = async () => {\n    await PeerConnection.closePeerSession();\n    dispatch(stopPeerSession());\n  };\n\n  const handleConnectOtherPeer = () => {\n    connection.id != null\n      ? dispatch(connectionAction.connectPeer(connection.id || \"\"))\n      : message.warning(\"Please enter ID\");\n  };\n\n  const [fileList, setFileList] = useAsyncState([] as UploadFile[]);\n  const [sendLoading, setSendLoading] = useAsyncState(false);\n\n  const handleUpload = async () => {\n    if (fileList.length === 0) {\n      message.warning(\"Please select file\");\n      return;\n    }\n    if (!connection.selectedId) {\n      message.warning(\"Please select a connection\");\n      return;\n    }\n    try {\n      await setSendLoading(true);\n      let file = fileList[0] as unknown as File;\n      let blob = new Blob([file], { type: file.type });\n\n      await PeerConnection.sendConnection(connection.selectedId, {\n        dataType: DataType.FILE,\n        file: blob,\n        fileName: file.name,\n        fileType: file.type,\n      });\n      await setSendLoading(false);\n      message.info(\"Send file successfully\");\n    } catch (err) {\n      await setSendLoading(false);\n      console.log(err);\n      message.error(\"Error when sending file\");\n    }\n  };\n\n  const [hash, initialId] = React.useMemo(\n    () =>\n      ((m) => [m[1], m[3]])(\n        decodeURI(location.hash).match(/^#([^:]+)(:(.+))?/) || [],\n      ),\n    [],\n  );\n\n  const url = React.useMemo(\n    () =>\n      String(\n        ((url) =>\n          Object.assign(url, {\n            hash: `#${hash}:${peer.id}`,\n          }))(new URL(document.location.href)),\n      ),\n    [hash, peer.id],\n  );\n\n  const [id, setId] = React.useState(() => initialId || \"\");\n\n  React.useEffect(() => {\n    dispatch(connectionAction.changeConnectionInput(id));\n  }, [id]);\n\n  return (\n    <Row justify={\"center\"} align={\"top\"}>\n      <Col xs={24} sm={24} md={20} lg={16} xl={12}>\n        <Card>\n          <Title level={2} style={{ textAlign: \"center\" }}>\n            P2P File Transfer\n          </Title>\n          <Card hidden={peer.started}>\n            <Button onClick={handleStartSession} loading={peer.loading}>\n              Start\n            </Button>\n          </Card>\n          <Card hidden={!peer.started}>\n            <Space direction=\"horizontal\">\n              <div>ID: {peer.id}</div>\n              <Button\n                icon={<CopyOutlined />}\n                onClick={async () => {\n                  await navigator.clipboard.writeText(peer.id || \"\");\n                  message.info(\"Copied: \" + peer.id);\n                }}\n              />\n              <Button danger onClick={handleStopSession}>\n                Stop\n              </Button>\n              <div>{url && <QrCode>{url}</QrCode>}</div>\n            </Space>\n          </Card>\n          <div hidden={!peer.started}>\n            <Card>\n              <Space direction=\"horizontal\">\n                <Input\n                  placeholder={\"ID\"}\n                  value={id}\n                  onChange={(e) => setId(e.target.value)}\n                  required={true}\n                />\n                <Button\n                  onClick={handleConnectOtherPeer}\n                  loading={connection.loading}\n                >\n                  Connect\n                </Button>\n              </Space>\n            </Card>\n\n            <Card title=\"Connection\">\n              {connection.list.length === 0 ? (\n                <div>Waiting for connection ...</div>\n              ) : (\n                <div>\n                  Select a connection\n                  <Menu\n                    selectedKeys={\n                      connection.selectedId ? [connection.selectedId] : []\n                    }\n                    onSelect={(item) =>\n                      dispatch(connectionAction.selectItem(item.key))\n                    }\n                    items={connection.list.map((e) => getItem(e, e, null))}\n                  />\n                </div>\n              )}\n            </Card>\n            <Card title=\"Send File\">\n              <Upload\n                fileList={fileList}\n                maxCount={1}\n                onRemove={() => setFileList([])}\n                beforeUpload={(file) => {\n                  setFileList([file]);\n                  return false;\n                }}\n              >\n                <Button icon={<UploadOutlined />}>Select File</Button>\n              </Upload>\n              <Button\n                type=\"primary\"\n                onClick={handleUpload}\n                disabled={fileList.length === 0}\n                loading={sendLoading}\n                style={{ marginTop: 16 }}\n              >\n                {sendLoading ? \"Sending\" : \"Send\"}\n              </Button>\n            </Card>\n          </div>\n        </Card>\n      </Col>\n    </Row>\n  );\n};\n\nexport default App;\n","import { PeerActionType, PeerState } from \"./peerTypes\";\n\nexport const initialState: PeerState = {\n  id: undefined,\n  loading: false,\n  started: false,\n};\n\nexport const PeerReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case PeerActionType.PEER_SESSION_START:\n      const { id } = action;\n      return { ...state, id, started: true };\n    case PeerActionType.PEER_SESSION_STOP:\n      return { ...initialState };\n    case PeerActionType.PEER_LOADING:\n      const { loading } = action;\n      return { ...state, loading };\n    default:\n      return state;\n  }\n};\n","import { ConnectionActionType, ConnectionState } from \"./connectionTypes\";\n\nexport const initialState: ConnectionState = {\n  id: undefined,\n  loading: false,\n  list: [],\n  selectedId: undefined,\n};\n\nexport const ConnectionReducer = (state = initialState, action) => {\n  if (action.type === ConnectionActionType.CONNECTION_INPUT_CHANGE) {\n    const { id } = action;\n    return { ...state, id };\n  } else if (action.type === ConnectionActionType.CONNECTION_CONNECT_LOADING) {\n    const { loading } = action;\n    return { ...state, loading };\n  } else if (action.type === ConnectionActionType.CONNECTION_LIST_ADD) {\n    let newList = [...state.list, action.id];\n    if (newList.length === 1) {\n      return { ...state, list: newList, selectedId: action.id };\n    }\n    return { ...state, list: [...state.list, action.id] };\n  } else if (action.type === ConnectionActionType.CONNECTION_LIST_REMOVE) {\n    let newList = [...state.list].filter((e) => e !== action.id);\n    if (state.selectedId && !newList.includes(state.selectedId)) {\n      if (newList.length === 0) {\n        return { ...state, list: newList, selectedId: undefined };\n      } else {\n        return { ...state, list: newList, selectedId: newList[0] };\n      }\n    }\n    return { ...state, list: newList };\n  } else if (action.type === ConnectionActionType.CONNECTION_ITEM_SELECT) {\n    return { ...state, selectedId: action.id };\n  } else {\n    return state;\n  }\n};\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { PeerReducer } from \"./peer/peerReducer\";\nimport { ConnectionReducer } from \"./connection/connectionReducer\";\n\nexport const store = configureStore({\n  reducer: {\n    peer: PeerReducer,\n    connection: ConnectionReducer,\n  },\n});\n\n// window.store = store\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport { store } from \"./store\";\n\n// https://github.com/chidokun/p2p-file-transfer\nexport default function Section() {\n  return (\n    <section>\n      <h2>Transfer</h2>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </section>\n  );\n}\n"],"names":["QrCode","children","canvasRef","useRef","useEffect","qrcode","current","margin","scale","error","console","React","style","href","target","ref","width","height","useAsyncState","initialValue","value","setValue","useState","x","Promise","resolve","peer","DataType","connectionMap","Map","PeerConnection","closePeerSession","reject","destroy","undefined","err","log","id","has","Error","conn","connect","reliable","on","set","onConnectionDisconnected","callback","get","delete","onConnectionReceiveData","receivedData","ConnectionActionType","setLoading","loading","type","CONNECTION_CONNECT_LOADING","addConnectionList","CONNECTION_LIST_ADD","removeConnectionList","CONNECTION_LIST_REMOVE","useAppDispatch","useDispatch","useAppSelector","useSelector","PeerActionType","PEER_LOADING","startPeer","async","dispatch","Peer","message","peerId","info","file","fileName","dataType","FILE","download","fileType","PEER_SESSION_START","startPeerSession","Title","Typography","App","state","connection","fileList","setFileList","sendLoading","setSendLoading","hash","initialId","m","decodeURI","location","match","url","String","Object","assign","URL","document","setId","CONNECTION_INPUT_CHANGE","connectionAction","Row","justify","align","Col","xs","sm","md","lg","xl","Card","level","textAlign","hidden","started","Button","onClick","handleStartSession","Space","direction","icon","CopyOutlined","navigator","clipboard","writeText","danger","PEER_SESSION_STOP","Input","placeholder","onChange","e","required","handleConnectOtherPeer","warning","title","list","length","Menu","selectedKeys","selectedId","onSelect","item","CONNECTION_ITEM_SELECT","key","items","map","label","Upload","maxCount","onRemove","beforeUpload","UploadOutlined","blob","Blob","sendConnection","data","send","name","disabled","marginTop","initialState","store","configureStore","reducer","PeerReducer","action","ConnectionReducer","newList","filter","includes","Section","Provider"],"sourceRoot":""}